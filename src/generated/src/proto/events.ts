// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: src/proto/events.proto

/* eslint-disable */
import type { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";
import { Struct } from "../../google/protobuf/struct";

export const protobufPackage = "events";

export interface EventRequest {
  eventName: string;
  timestamp: string;
  data: { [key: string]: any } | undefined;
}

export interface EventResponse {
  status: string;
  message: string;
}

export const EVENTS_PACKAGE_NAME = "events";

wrappers[".google.protobuf.Struct"] = { fromObject: Struct.wrap, toObject: Struct.unwrap } as any;

export interface EventsServiceClient {
  eventStream(request: Observable<EventRequest>, metadata?: Metadata): Observable<EventResponse>;
}

export interface EventsServiceController {
  eventStream(request: Observable<EventRequest>, metadata?: Metadata): Observable<EventResponse>;
}

export function EventsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("EventsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["eventStream"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("EventsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const EVENTS_SERVICE_NAME = "EventsService";
