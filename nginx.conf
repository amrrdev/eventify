events {
    worker_connections 1024;
}

http {
    # Disable buffering for streaming
    proxy_buffering off;
    
    upstream nestjs_http {
        server 127.0.0.1:3000;  # Railway: Both services in same container
    }

    upstream nestjs_grpc {
        server 127.0.0.1:4000;  # Railway: Both services in same container
    }

    server {
        listen 80;
        http2 on;
        server_name _;
        
        # Increase message size limits for large gRPC messages
        client_max_body_size 2G;
        client_body_buffer_size 128M;
        
        # gRPC timeouts
        grpc_read_timeout 300s;
        grpc_send_timeout 300s;   
        
        location / {
            if ($content_type ~* "application/grpc") {
                grpc_pass grpc://nestjs_grpc;
                break;
            }
            
            proxy_pass http://nestjs_http;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
        }
        
        location /grpc/ {
            grpc_pass grpc://nestjs_grpc;
            grpc_set_header Host $host;
            grpc_set_header X-Real-IP $remote_addr;
            grpc_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            grpc_set_header X-Forwarded-Proto $scheme;
        }
        
        # Health check
        location /health {
            proxy_pass http://nestjs_http/api/v1/health/simple;  # Simple health check
            proxy_set_header Host $host;
        }
    }
}